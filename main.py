import random

def bbs(index, m, x0):
    if index == 0:
        return pow(x0, 2) % (m)
    elif index < 998:
        return pow(bbs(index-1, m, x0), 2) % (m)
    else:
        return pow(x0, pow(2, index) * carmichael(m)) % (m)

def carmichael(n):
    primeProducts = set()
    nTemp = n
    toAdd = 2
    while toAdd <= nTemp:
        print(toAdd)
        if (nTemp / toAdd) < 1:
            break
        if (nTemp / toAdd).is_integer():
            nTemp = nTemp / toAdd
            primeProducts.add(toAdd)
        else:
            toAdd+=1
    returnValue = 1
    for p in primeProducts:
        returnValue *= (1 - 1/p)
    returnValue *= n
    if n >= 8 and ((n & (n - 1)) == 0):
        returnValue /= 2
    return int(returnValue)

def xorshift(size, state, a, b, c):
    assert size >= state.bit_length()
    oldsize = 2**state.bit_length()
    state ^= (state << a)
    state = state % oldsize
    state ^= (state >> b)
    oldsize = 2**state.bit_length()
    state ^= (state << c)
    state = state % oldsize

    if size > state.bit_length():
        overflow = size - state.bit_length()
        stateTemp = state % 2**overflow
        if stateTemp != 0:
            result = xorshift(overflow, stateTemp, a, b, c)
            state = (state << result.bit_length()) | (result)
        else:
            shiftAmount = state.bit_length() - overflow
            result = xorshift(overflow, state >> shiftAmount, a, b, c)
            state = (state << result.bit_length()) | (result)

    return state

if __name__ == "__main__":
    # p = 171669832909939861958115051553927939010937285163227785992618072924706999907173589031501998708227907986313758092365672654970079341235520693196160834863238835107985167297402467072359117491905351326487254879660501907553788181217053925870533532612131443518974810723306851639504210282064227773365630388224687721878830307935746864952347535940453520425766894194377078882259053722951569947299011706300591714448400965448853208406758662658635468006127800388270359337368217863551816447198854455118297856445738545696220598193729414883324936289986892456089922038323175653998357049731509017218180252307240382250611202127209333833665193365412639852270022552846842680264429527968361182748171512981494815905457530482912111558980692257384773663400516280431643129276148635276371940566959643
    # q = 118530938077359217514788262274192349445270565577488943401931548764547409196924531259469473311379272479699652770078528240868238646814941249469020678356984479450452293100295999045108541336249743702062864056178767988659913205115029491637319098511757021243152171429570674889789646362575617523858902628920470156288225270457406516102220796187552449463862216865059493010641059606909427663130755742753065286918821701821230179146727654657775867749168745912077938014899917667798806480643599113093189245772245144641809156080199856663596294043362768366348528686481857456626654794287539531877226638139085957859063437378985167133884134696370802791884311031993006856649440664265360909325389294452782743811555401245128191080980055542893603339531202787930880737663189995794297800766304693
    # seed = random.getrandbits(8)
    # result = bbs(997, p * q, seed)
    # print("Result = " + str(result))
    # print("Size = " + str(result.bit_length()))
    seed = random.getrandbits(32)
    result = xorshift(4096, seed, 13, 17, 5)
    print(result)
    print("TAMANHO: " + str(result.bit_length()))
